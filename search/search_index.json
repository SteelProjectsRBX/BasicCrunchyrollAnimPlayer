{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BasicCrunchyrollAnimPlayer","text":"<p>This is essentially a small wrapper based off ffrostfall's crunchyroll animation solver<sup> (hilarious name btw) with barebones animation playing functionality. <p>My motive for creating this was to start learning how to use rojo &amp; other professional tools, and because I needed to replace default roblox animations to be compatible with my game that has custom replication &amp; lag compensation.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#basiccrunchyrollanimplayer","title":"BasicCrunchyRollAnimPlayer","text":""},{"location":"api/#createanimator","title":".CreateAnimator","text":"<p>Constructs an <code>AnimPlayer</code>.</p> <pre><code>BasicCrunchyRollAnimPlayer.CreateAnimator(\n    rig: Crunchyroll.Rig,\n    motor6Ds: {Motor6D}?\n) -&gt; AnimPlayer\n</code></pre>"},{"location":"api/#animplayer","title":"AnimPlayer","text":""},{"location":"api/#properties","title":"Properties","text":""},{"location":"api/#rig-rig","title":"Rig [ <code>Rig</code> ]","text":"<p>The crunchyroll rig that is being used.</p>"},{"location":"api/#limbcframes-string-cframe","title":"LimbCFrames [ {[string]: CFrame} ]","text":"<p>Equal to <code>rig.result_coordinate_frames</code>. The CFrames are in world space.</p>"},{"location":"api/#playinganims-animationasset-animationplaydata","title":"PlayingAnims [ {[AnimationAsset]: AnimationPlayData} ]","text":"<p>The list of currently playing animations. Imagine it as <code>Animator:GetPlayingAnimationTracks()</code>. </p> <p>You can modify the settings of the animations at runtime. For example, you might want to change the speed. You can do so by doing <code>PlayingAnims[animAsset].speed = 2</code></p>"},{"location":"api/#methods","title":"Methods","text":""},{"location":"api/#getlimbworldcframesrootcf-cframe","title":"<code>:GetLimbWorldCFrames(rootCF: CFrame)</code>","text":"<p>Returns <code>self.LimbCFrames</code>.</p>"},{"location":"api/#updatelivelimbcframesrootcf-cframe","title":"<code>:UpdateLiveLimbCFrames(rootCF: CFrame)</code>","text":"<p>Uses the passed Motor6Ds to update the <code>.C1</code> of every limb to the current <code>AnimPlayer.LimbCFrames</code>. </p> <p><code>rootCF</code> should be the <code>HumanoidRootPart.CFrame</code>.</p>"},{"location":"api/#stepforwarddt-number-rootcf-cframe-updatelivetoo-boolean","title":"<code>:StepForward(dt: number, rootCF: CFrame, updateLiveToo: boolean?)</code>","text":"<p>Steps forward every animation by <code>dt</code>. Stops every animation when its done, unless <code>.Looped</code> is true.</p>"},{"location":"api/#setlimbcframesinstantlynewlimbworldcframes-string-cframe-rootcf-cframe-updatelivetoo-boolean","title":"<code>:SetLimbCFramesInstantly(newLimbWorldCFrames: {[string]: CFrame}, rootCF: CFrame, updateLiveToo: boolean)</code>","text":"<p>Immediately sets <code>self.LimbCFrames</code> to the provided <code>newLimbWorldCFrames</code> table, and optionally also updates <code>Motor6D.C1</code>s if <code>updateLiveToo</code> is <code>true</code>.</p>"},{"location":"api/#startplayinganimationanimasset-animationasset-playdata-animationplaydata","title":"<code>:StartPlayingAnimation(animAsset: AnimationAsset, playData: AnimationPlayData</code>","text":"<p>Begins playing an animation by inserting it in <code>self.PlayingAnims</code>.</p> <p><code>animAsset</code> can be retrieved by calling <code> crunchyroll.load_keyframe_sequence(keyframe_sequence) </code></p>"},{"location":"api/#stopplayinganimationanimasset-animationasset","title":"<code>:StopPlayingAnimation(animAsset: AnimationAsset)</code>","text":"<p>Immediately stops playing an animation by removing it from <code>self.PlayingAnims</code>.</p>"},{"location":"intro/","title":"Getting started","text":""},{"location":"intro/#define-your-rigs","title":"Define your rig(s)","text":"<p>Firstly, you need to create a crunchyroll rig. For example, a setup that constructs a valid R6 rig would look like this:</p> <pre><code>local crunchyroll = require(path_to_crunchyroll)\n\nreturn function()\n    return Crunchyroll.create_rig({\n        name = \"Torso\",\n\n        c0 = CFrame.new(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),\n        c1 = CFrame.new(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),\n\n        children = {\n            {\n                name = \"Head\",\n                c0 = CFrame.new(0, 1, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),\n                c1 = CFrame.new(0, -0.5, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),\n            },\n            {\n                name = \"Left Leg\",\n                c0 = CFrame.new(-1, -1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),\n                c1 = CFrame.new(-0.5, 1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),\n            },\n            {\n                name = \"Right Leg\",\n                c0 = CFrame.new(1, -1, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),\n                c1 = CFrame.new(0.5, 1, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),\n            },\n            {\n                name = \"Left Arm\",\n                c0 = CFrame.new(-1, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),\n                c1 = CFrame.new(0.5, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),\n            },\n            {\n                name = \"Right Arm\",\n                c0 = CFrame.new(1, 0.5, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),\n                c1 = CFrame.new(-0.5, 0.5, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),\n            },\n        },\n    })\nend\n</code></pre> <p>This function, when called, returns an R6 crunchyroll rig to be used for animating. You should create one for each separate DataModel rig you wish to animate.</p>"},{"location":"intro/#initialize-keyframesequence-instances","title":"Initialize <code>KeyframeSequence</code> instances","text":"<p>If needed, a neat trick to extract the <code>KeyframeSequence</code> from an Animation object would be to paste this in the RobloxStudio command bar:</p> <pre><code>game:GetObjects(\"AnimationContentURL\")[1].Parent = workspace\n</code></pre> <p>All base R6 <code>KeyframeSequences</code> can be downloaded here, or found at https://github.com/SteelProjectsRBX/BasicCrunchyrollAnimPlayer/raw/refs/heads/main/dev/rigs/r6/r6anims.rbxm</p>"},{"location":"intro/#basic-example-of-using-basiccrunchyrollanimplayer","title":"Basic example of using BasicCrunchyrollAnimPlayer","text":""},{"location":"intro/#create-an-animplayer-object","title":"Create an <code>AnimPlayer</code> object","text":"<pre><code>local mySigmaRig = BasicCrunchyrollAnimPlayer.CreateAnimator(rig, motor6Ds)\n</code></pre> <p>You will need to provide the crunchyroll rig to use, and, optionally<sup>1, an array of <code>Motor6Ds</code>, that are named exactly as defined in your rig template. For example, the Motor6D that corresponds to move the <code>Right Arm</code> should of course be named <code>Right Arm</code>. <p>For R6 rigs, Roblox names them differently. For example, <code>Right Arm</code> is named <code>Right Shoulder</code>. Make sure that the crunchyroll rig limbs match the Motor6D names!</p>"},{"location":"intro/#start-playing-animations","title":"Start playing animations","text":"<pre><code>local animAsset = crunchyroll:load_keyframe_sequence(sequence)\nlocal playData = {\n    alpha = 0,\n\n    start_fade_time = 0,\n    stop_fade_time = 0,\n\n    weight = 1,\n    priority = 1,\n\n    looped = false, -- Whether the animation should repeat after it finishes.\n}\n\nmySigmaRig:StartPlayingAnimation(animAsset, playData)\n</code></pre> <p>To stop an animation: <pre><code>mySigmaRig:StopPlayingAnimation(animAsset)\n</code></pre></p>"},{"location":"intro/#stepping-all-animations","title":"Stepping all animations","text":"<p>If you have supplied Motor6Ds while constructing the player, you can use <code>:StepForward</code> <pre><code>RunService.Heartbeat:Connect(function(dt)\n    local updateLiveToo = false\n\n    mySigmaRig:StepForward(dt, rootCF, updateLiveToo)\nend)\n</code></pre></p> <p>... where <code>updateLiveToo</code> indicates whether to update Motor6Ds to the new solved limb CFrames.</p> <p><sub> 1. If you wish to not use Motor6Ds, you won't be able to use <code>:UpdateLiveLimbCFrames</code> or pass <code>updateLiveToo</code> in certain API functions, as they assume Motor6Ds exist. You can write your own logic about updating CFrames in the DataModel rig. (<code>updateLiveToo</code> is a flag that indicates whether to update <code>Motor6D.C1</code>.)"},{"location":"intro/#manually-updating-motor6d-cframes","title":"Manually updating <code>Motor6D</code> CFrames","text":"<p>If you have supplied <code>Motor6Ds</code> while constructing the player, you can use <code>:UpdateLiveLimbCFrames</code> and <code>:SetLimbCFramesInstantly</code>. Both are useful for applying lag compensation.</p> <p>For information on what each function does, view the API reference. Here is an example .rbxl file that utilizes BasicCrunchyrollAnimPlayer.</p>"},{"location":"datatypes/AnimationPlayData/","title":"AnimationPlayData","text":""},{"location":"datatypes/AnimationPlayData/#summary","title":"Summary","text":"<pre><code>AnimationPlayData: {\n    alpha: number,\n\n    start_fade_time: number,\n    stop_fade_time: number,\n\n    weight: number,\n    priority: number,\n\n    speed: number?,\n    looped: boolean\n}\n</code></pre>"},{"location":"datatypes/AnimationPlayData/#fields","title":"Fields","text":""},{"location":"datatypes/AnimationPlayData/#alpha-number","title":"alpha [number]","text":"<p>The percentage (0 - 1) of the animation progress.</p>"},{"location":"datatypes/AnimationPlayData/#speed-number","title":"speed [number?]","text":"<p>The animation play speed. If not supplied, the player will behave as if it was set to 1 (normal speed).</p> <p>If set to 2, the animation will play twice as fast, and if set to 0.5, it will be half as fast, and so on.</p>"},{"location":"datatypes/AnimationPlayData/#start_fade_time-number","title":"start_fade_time [number]","text":"<p>\u2800</p>"},{"location":"datatypes/AnimationPlayData/#stop_fade_time-number","title":"stop_fade_time [number]","text":"<p>\u2800</p>"},{"location":"datatypes/AnimationPlayData/#weight-number","title":"weight [number]","text":"<p>Higher value = higher animation weight, which basically means the animation has more influence over other playing animations.</p>"},{"location":"datatypes/AnimationPlayData/#priority-number","title":"priority [number]","text":"<p>If there are multiple animations that influence the same limb, the animations with the lowest priority values will be played, and other animations will be ignored.</p>"},{"location":"datatypes/AnimationPlayData/#looped-boolean","title":"looped [boolean?]","text":"<p>Animations with <code>looped</code> set to <code>false</code> or <code>nil</code> will be immediately stopped when their <code>alpha</code> reaches 1 when using <code>AnimPlayer:StepForward()</code>.</p> <p>```</p>"}]}